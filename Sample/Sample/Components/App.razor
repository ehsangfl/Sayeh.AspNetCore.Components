@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Localization
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Authentication;
@inject IHostEnvironment HostEnvironment

<!DOCTYPE html>
<html lang="en">

<head lang="@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName" >
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="Sample.styles.css" />
    <HeadOutlet @rendermode=InteractiveAuto/>
</head>

<body class="overflow-hidden h-100 @(CultureInfo.CurrentCulture.TextInfo.IsRightToLeft ? "rtl" : "ltr")" dir="@(CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft ? "rtl" : "ltr")">

    <script src="_content/Microsoft.FluentUI.AspNetCore.Components/js/loading-theme.js" type="text/javascript"></script>
    <loading-theme storage-name="theme"></loading-theme>

    <Routes @rendermode=InteractiveAuto />

    <div id="blazor-error-ui" data-nosnippet>
        @if (HostEnvironment.IsProduction())
        {
            <span>An error has occurred.</span>
        }
        else
        {
            <span>An unhandled exception occurred.</span>
        }
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script src="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" type="module" async></script>

    <script>
        var currentCultoreName = '@CultureInfo.CurrentUICulture.Name';
        Blazor.start({
            webAssembly: {
                applicationCulture: currentCultoreName
            },
            circuit: {
                configureSignalR: function (builder) {
                    builder.configureLogging("trace");
                }
            }
        });
    </script>
</body>

</html>

@code{

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [Inject]
    public GlobalState? GlobalState { get; set; }

    protected override void OnInitialized()
    {
        HttpContext?.Response.Cookies.Append(
           CookieRequestCultureProvider.DefaultCookieName,
           CookieRequestCultureProvider.MakeCookieValue(
               new RequestCulture(
                   CultureInfo.CurrentCulture,
                   CultureInfo.CurrentUICulture)));

        GlobalState?.SetDirection(System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft ? LocalizationDirection.RightToLeft : LocalizationDirection.LeftToRight);
        base.OnInitialized();
    }
}
