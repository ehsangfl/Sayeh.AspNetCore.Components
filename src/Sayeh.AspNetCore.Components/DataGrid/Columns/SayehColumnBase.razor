@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.FluentUI.AspNetCore.Components
@using Sayeh.AspNetCore.Components.DataGrid.Infrastructure
@using System.ComponentModel


@namespace Sayeh.AspNetCore.Components
@typeparam TItem

@{
    Grid.AddColumn(this);
}

@code
{

    private void RenderDefaultHeaderContent(RenderTreeBuilder __builder)
    {
        @if (HeaderCellItemTemplate is not null)
        {
            @HeaderCellItemTemplate(this)
        }
        string? tooltip = Tooltip ? Title : null;
        <div style="display:flex">
            @if (this.SortingIsEnable())
            {
                var sortableColumn = this as ISortableColumn<TItem>;
                @if ((!System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.Start) || (System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.End))
                {
                    RenderFilterPart(__builder);
                }

                <FluentButton Appearance="Appearance.Stealth" class="col-sort-button" @onclick=SortChanged aria-label="@tooltip" title="@tooltip">
                    <div class="col-title-text" title="@tooltip">@Title</div>
                    @if (sortableColumn!.SortDirection.HasValue)
                    {
                        if (sortableColumn.SortDirection.Value == ListSortDirection.Ascending)
                        {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ArrowSortUp())" Slot="@(Align == Align.End ? "start" : "end")" />
                        }
                        else
                        {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ArrowSortDown())" Slot="@(Align == Align.End ? "start" : "end")" />
                        }

                    }
                </FluentButton>

                @if ((!System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.End) || (System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.Start))
                {
                    RenderFilterPart(__builder);
                }
            }
            else
            {
                <div class="col-title" title="@tooltip">
                    @if (Align == Align.Start || (!System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.Start) || (System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.End))
                    {
                        RenderFilterPart(__builder);
                    }
                    <div class="col-title-text">@Title</div>
                    @if (Align == Align.End || (!System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.End) || (System.Globalization.CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft && Align == Align.Start))
                    {
                        RenderFilterPart(__builder);
                    }
                </div>
            }
            @if (ColumnOptions is not null && (Align == Align.End || Align == Align.End))
            {
                <FluentButton Appearance="Appearance.Stealth" class="col-options-button" @onclick="@(() => Grid.ShowColumnOptionsAsync(this))" aria-label="Filter this column">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Filter())" />
                </FluentButton>
            }
        </div>
    }

    internal void RenderPlaceholderContent(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        // Blank if no placeholder template was supplied, as it's enough to style with CSS by default
        if (PlaceholderTemplate is not null)
        {
            @PlaceholderTemplate(placeholderContext)
        }
    }

    internal void RenderFilterPart(RenderTreeBuilder __builder)
    {
        if (this.FilterIsEnable() || ColumnOptions is not null)
        {
            var filterableThis = this.GetType().GetInterfaces().Where(w => w.Name.StartsWith("IFilterableColumn")).OrderBy(o => o.GenericTypeArguments.Count()).Last();
            var propertyType = filterableThis.GenericTypeArguments.Last();
            var filterComponent = typeof(ColumnOptions<,>).MakeGenericType(new[] { typeof(TItem), propertyType });
            <CascadingValue Value="this" IsFixed=true>
                <DynamicComponent Type=filterComponent @ref=headerOptionsComponentHolder></DynamicComponent>
            </CascadingValue>
        }
    }
}
